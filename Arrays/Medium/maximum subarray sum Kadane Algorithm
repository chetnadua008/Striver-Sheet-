//brute force
int maxi=INT_MIN;
for(int i=0;i<nums.size();i++){
    for(int j=i;j<nums.size();j++){
        int sum=0;
        for(int k=i;k<=j;k++){
            sum+=nums[k];
        }
        maxi=max(sum,maxi);
    }
}
return maxi;
time complexity: O(N^3)
space complexity: O(1)

//better solution
int maxi=INT_MIN;
for(int i=0;i<nums.size();i++){
    int sum=0;
    for(int j=i;j<nums.size();j++){
        sum+=arr[j];    
        maxi=max(maxi,sum);
    }
}
return maxi;
time complexity: O(N^2)
space complexity: O(1)

//optimal solution (kadane algorithm)
int maxSubArray(vector<int>& nums) {
    //kadanes algorithm
    int maxi=INT_MIN;
    int sum=0;
    for(int i=0;i<nums.size();i++){
        sum+=nums[i];
        maxi=max(sum,maxi);
        //do not carrt anything negative from previous
        if(sum<0) sum=0;
    }
    return maxi;
}
time complexity: O(N)
space complexity: O(1)
principle: sum contains maximum sub array sum ending at nums[i]. maxs is maximum value of sum for nums[i], i=0 to n-1
//sum gets largest by dropping it if its negative else carry it further if its positive


//follow up question (print the sub array with longest sum)
int maxi=INT_MIN;
int sum=0;
int ansStart,andEnd,start;
for(int i=0;i<nums.size();i++){
    if(sum==0) start=i;
    sum+=nums[i];
    if(sum>maxi){
        maxi=sum;
        ansStart=start;
        ansEnd=i;
    }
    //do not carrt anything negative from previous
    if(sum<0) sum=0;
}
return maxi;
