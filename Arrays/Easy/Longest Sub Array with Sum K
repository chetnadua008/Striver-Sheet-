//sub array = set of consecutive elements of the array
//sub sequence = set of non consecutive elements of array


//brute force

int lenOfLongestSubarr(vector <int> & arr, int k) {
        int n=arr.size();
        int len=0;
        int sum=0;

        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                sum=0;
                for(int k=i;k<=j;k++)
                    sum+=arr[k];
                
                if(sum==k) len=max(len,j-i+1);
            }
        }
        return len;
    }
Time Complexity: O(N^3)
Space Complexity: O(1)

//optimized brute force

int lenOfLongestSubarr(vector <int> & arr, int k) {
        int n=arr.size();
        int len=0;
        int sum=0;
        for(int i=0;i<n;i++){
            sum=0;
            for(int j=i;j<n;j++){
                sum+=arr[j];
                if(sum==k)
                    len=max(len,j-i+1);
            }
        }
        return len;
    }
Time Complexity: O(N^2)
Space Complexity: O(1)

//better solution (hashmap) (optimal if array has negative values as well)

int lenOfLongestSubarr(vector <int> &arr, int k){
        map <int,int> preSum;
        int sum=0;
        int maxLen=0;
        for(int i=0;i<arr.size();i++){
                sum+=arr[i];
                if(sum==k) maxLen=i+1;
                int rem = sum - k;
                if(preSum.find(rem)!=preSum.end()){
                        maxLen=max(maxLen,i-preSum[rem]);
                }
                if(preSum.find(sum)==preSum.end()){
                        preSum[sum]=i;
                }
        }
        return maxLen;
}
Time Complexity : O(nlogn) using ordered map
                : O(n * 1) using unordered map (best case)
                : O(n * n) using unordered map (worst case)

//optimal solution (two pointer approach) (array does not have negative values)

int lenOfLongestSubarr(vector <int> &arr, int k){
        int left=0,right=0;
        int sum=arr[0];
        int maxLen=0;
        while( right < arr.size() ){
                while( left <=right && sum > k){
                        sum-=arr[left++];
                }
                if(sum==k){
                        maxLen=max(maxLen,right-left+1);
                }
                right++;
                if(right< arr.size()) sum+=arr[right];
        }
        return maxLen;
}

Time complexity: O(2N) , n for right pointer, n for left pointer
Space Complexity: O(1)
